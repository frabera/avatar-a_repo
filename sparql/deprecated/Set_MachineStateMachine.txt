PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> 
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX factory: <http://www.ontoeng.com/factory#>
PREFIX osph: <http://www.ontoeng.com/osph#>
PREFIX fsm: <http://www.learninglab.de/~dolog/fsm/fsm.owl#>

INSERT { 
	GRAPH ?g { 
		?stM a owl:NamedIndividual , fsm:StateMachine .
		?machine osph:hasStateMachine ?stM .
		
		?trWorkIdle a owl:NamedIndividual , fsm:Transition .
		?trInitCompIdle a owl:NamedIndividual , fsm:Transition .
		?trIdleWork a owl:NamedIndividual , fsm:Transition .
		?initSt a owl:NamedIndividual , fsm:Initial .
		?workState a owl:NamedIndividual , factory:MachineToolWorkinigState .
		?idleComp a owl:NamedIndividual , fsm:Composite .
		?guardTrIdleWork a owl:NamedIndividual , fsm:Guard .
		?startOp a owl:NamedIndividual , factory:MachineToolStartOperationType .
		
		?initInIdleComp a owl:NamedIndividual , fsm:Initial .
		?blockedSt a owl:NamedIndividual , factory:MachineToolBlockedState .
		?starvedSt a owl:NamedIndividual , factory:MachineToolStarvedState .
		?idleSt a owl:NamedIndividual , factory:MachineToolIdleState .
		?trInitIdle a owl:NamedIndividual , fsm:Transition .
		
		?stM fsm:contains ?trWorkIdle .
		?stM fsm:contains ?trInitCompIdle .
		?stM fsm:contains ?trIdleWork .
		?stM fsm:contains ?initSt .
		?stM fsm:contains ?guardTrIdleWork .
		?stM fsm:contains ?workState .
		?stM fsm:contains ?idleComp .
		
		?trWorkIdle fsm:Source ?workState .
		?trWorkIdle fsm:Target ?idleComp .
		?trInitCompIdle fsm:Source ?initSt .
		?trInitCompIdle fsm:Target ?idleComp .
		?trIdleWork fsm:Source ?idleComp .
		?trIdleWork fsm:Target ?workState .
		
		?trIdleWork fsm:TransitionGuard ?guardTrIdleWork .
		?guardTrIdleWork fsm:GuardEvent ?startOp .

		?idleComp fsm:hasStateMachineElement ?initInIdleComp .
		?idleComp fsm:hasStateMachineElement ?blockedSt .
		?idleComp fsm:hasStateMachineElement ?starvedSt .
		?idleComp fsm:hasStateMachineElement ?idleSt .
		?trInitIdle fsm:Source ?initInIdleComp .
		?trInitIdle fsm:Target ?idleSt .
	}
}
WHERE {
	BIND(URI("#mach#") AS ?machine) . 	
	GRAPH ?g
	{
		?machine rdf:type/rdfs:subClassOf* factory:MachineTool .
	}
	OPTIONAL{
		?machine osph:hasStateMachine ?stM_ .		
		?stM_ fsm:contains ?trWorkIdle_ .
		?trWorkIdle_ a fsm:Transition .
		?stM_ fsm:contains ?trInitCompIdle_ .
		?trInitCompIdle_ a fsm:Transition .
		?stM_ fsm:contains ?trIdleWork_ .
		?trIdleWork_ a fsm:Transition .
		?stM_ fsm:contains ?initSt_ .
		?initSt_ a fsm:Initial .
		?stM_ fsm:contains ?guardTrIdleWork_ .
		?guardTrIdleWork_ a fsm:Guard .
		?stM_ fsm:contains ?workState_ .
		?workState_ a factory:MachineToolWorkinigState .
		?stM_ fsm:contains ?idleComp_ .
		?idleComp_ a fsm:Composite .
		
		?trWorkIdle_ fsm:Source ?workState_ .
		?trWorkIdle_ fsm:Target ?idleComp_ .
		?trInitCompIdle_ fsm:Source ?initSt_ .
		?trInitCompIdle_ fsm:Target ?idleComp_ .
		?trIdleWork_ fsm:Source ?idleComp_ .
		?trIdleWork_ fsm:Target ?workState_ .
		
		?trIdleWork_ fsm:TransitionGuard ?guardTrIdleWork_ .
		?guardTrIdleWork_ fsm:GuardEvent ?startOp_ .
		?startOp_ a factory:MachineToolStartOperationType .

		?idleComp_ fsm:hasStateMachineElement ?initInIdleComp_ .
		?initInIdleComp_ a fsm:Initial .
		?idleComp_ fsm:hasStateMachineElement ?blockedSt_ .
		?blockedSt_ a factory:MachineToolBlockedState_ .
		?idleComp_ fsm:hasStateMachineElement ?starvedSt_ .
		?starvedSt_ a factory:MachineToolStarvedState .
		?idleComp_ fsm:hasStateMachineElement ?idleSt_ .
		?idleSt_ a factory:MachineToolIdleState .
		?trInitIdle_ fsm:Source ?initInIdleComp_ .
		?trInitIdle_ fsm:Target ?idleSt_ .	
		?trInitIdle_ a fsm:Transition .
	}

	BIND(IF(bound(?stM_),?stM_ ,URI(CONCAT(STR(?machine),"_stM")) ) AS ?stM ) .  
	BIND(IF(bound(?trWorkIdle_),?trWorkIdle_ ,URI(CONCAT(STR(?machine),"_stM_trWorkIdle")) ) AS ?trWorkIdle ) . 
	BIND(IF(bound(?trInitCompIdle_),?trInitCompIdle_ ,URI(CONCAT(STR(?machine),"_stM_trInitCompIdle")) ) AS ?trInitCompIdle ) . 
	BIND(IF(bound(?initSt_),?initSt_ ,URI(CONCAT(STR(?machine),"_stM_initSt")) ) AS ?initSt ) . 
	BIND(IF(bound(?guardTrIdleWork_),?guardTrIdleWork_ ,URI(CONCAT(STR(?machine),"_stM_guardTrIdleWork")) ) AS ?guardTrIdleWork ) . 
	BIND(IF(bound(?workState_),?workState_ ,URI(CONCAT(STR(?machine),"_stM_workState")) ) AS ?workState ) . 
	BIND(IF(bound(?trIdleWork_),?trIdleWork_ ,URI(CONCAT(STR(?machine),"_stM_trIdleWork")) ) AS ?trIdleWork ) . 
	BIND(IF(bound(?idleComp_),?idleComp_ ,URI(CONCAT(STR(?machine),"_stM_idleComp")) ) AS ?idleComp ) . 
	BIND(IF(bound(?startOp_),?startOp_ ,URI(CONCAT(STR(?machine),"_stM_startOp")) ) AS ?startOp ) . 

	BIND(IF(bound(?initInIdleComp_),?initInIdleComp_ ,URI(CONCAT(STR(?machine),"_stM_initInIdleComp")) ) AS ?initInIdleComp ) . 
	BIND(IF(bound(?idleSt_),?idleSt_ ,URI(CONCAT(STR(?machine),"_stM_idleSt")) ) AS ?idleSt ) . 
	BIND(IF(bound(?starvedSt_),?starvedSt_ ,URI(CONCAT(STR(?machine),"_stM_starvedSt")) ) AS ?starvedSt ) . 
	BIND(IF(bound(?blockedSt_),?blockedSt_ ,URI(CONCAT(STR(?machine),"_stM_blockedSt")) ) AS ?blockedSt ) . 
	BIND(IF(bound(?trInitIdle_),?trInitIdle_ ,URI(CONCAT(STR(?machine),"_stM_trInitIdle")) ) AS ?trInitIdle ) . 
}